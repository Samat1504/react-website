{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useRef, useCallback, useImperativeHandle } from 'react';\nimport { Controller } from 'react-hook-form';\nimport PropTypes from 'prop-types';\n\nvar ReactHookFormInput = function ReactHookFormInput(_ref, ref) {\n  var Component = _ref.Component,\n      name = _ref.name,\n      defaultValue = _ref.defaultValue,\n      shouldUnregister = _ref.shouldUnregister,\n      control = _ref.control,\n      rules = _ref.rules,\n      onChange_ = _ref.onChange,\n      onBlur_ = _ref.onBlur,\n      rest = _objectWithoutProperties(_ref, [\"Component\", \"name\", \"defaultValue\", \"shouldUnregister\", \"control\", \"rules\", \"onChange\", \"onBlur\"]);\n\n  var internalRef = useRef();\n  var setRef = useCallback(function (instance) {\n    internalRef.current = instance;\n\n    if (ref) {\n      if (typeof ref === 'function') {\n        ref(instance);\n      } else {\n        ref.current = instance;\n      }\n    }\n  }, [ref]); // `feact-hook-form` doesn't know how to properly handle `undefined` values.\n  // https://github.com/react-hook-form/react-hook-form/issues/2990\n\n  defaultValue = defaultValue === undefined ? null : defaultValue;\n\n  var renderInputComponent = function renderInputComponent(_ref2) {\n    var ref = _ref2.ref,\n        onChange = _ref2.onChange,\n        onBlur = _ref2.onBlur,\n        restReactHookFormControlledFieldProps = _objectWithoutProperties(_ref2, [\"ref\", \"onChange\", \"onBlur\"]); // Setting `ref` passed by `react-hook-form` results in a bug:\n    // when an initial value is defined (example: \"+78005553535\")\n    // it seems to be set directly on the `ref`d `<input/>`\n    // by `react-hook-form` and the result is a non-formatted\n    // \"+78005553535\" initial value in the `<input/>`.\n    //\n    // To work around that bug, a fake `ref` is assigned,\n    // so that it could only `.focus()` it and no more.\n    //\n    // `useImperativeHandle()` hook seems to allow `ref` being `undefined`.\n    //\n    // if (ref) {\n\n\n    useImperativeHandle(ref, function () {\n      return {\n        focus: function focus() {\n          internalRef.current.focus();\n        }\n      };\n    }); // }\n\n    var setComponentRef = useCallback(function (instance) {\n      setRef(instance); // if (ref) {\n      //   if (typeof ref === 'function') {\n      //     ref(instance)\n      //   } else {\n      //     ref.current = instance\n      //   }\n      // }\n    }, [ref, setRef]);\n    var onChangeCombined = useCallback(function (value) {\n      onChange(value);\n\n      if (onChange_) {\n        onChange_(value);\n      }\n    }, [onChange, onChange_]);\n    var onBlurCombined = useCallback(function (event) {\n      onBlur(event);\n\n      if (onBlur_) {\n        onBlur_(event);\n      }\n    }, [onBlur, onBlur_]);\n    return React.createElement(Component, _extends({}, rest, restReactHookFormControlledFieldProps, {\n      ref: setComponentRef,\n      onChange: onChangeCombined,\n      onBlur: onBlurCombined\n    }));\n  }; // `react-hook-form@7` no longer accepts `onFocus` property.\n  // Since this component can be used with both `v6` and `v7`,\n  // the `onFocus` property is left here.\n\n\n  var onFocus = useCallback(function () {\n    // internalRef.current.disabled = false\n    internalRef.current.focus();\n  }, []);\n  return React.createElement(Controller, {\n    control: control,\n    name: name,\n    defaultValue: defaultValue,\n    shouldUnregister: shouldUnregister,\n    rules: rules,\n    onFocus: onFocus,\n    render: function render(props) {\n      // Differentiate between `react-hook-form@6` and `react-hook-form@7`.\n      // https://react-hook-form.com/migrate-v6-to-v7/\n      // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/57\n      // `props` (before v7) and `props.fields` (in v7) contain properties like:\n      // `ref`, `name`, `value`, `onChange`, `onBlur`.\n      // https://github.com/react-hook-form/react-hook-form/blob/b0e6c3057ac12a7b12d5616aecf3791acb7d7204/src/types/controller.ts#L21-L30\n      return renderInputComponent(props.field || props);\n    }\n  });\n};\n\nReactHookFormInput = React.forwardRef(ReactHookFormInput);\nReactHookFormInput.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  name: PropTypes.string.isRequired,\n  defaultValue: PropTypes.string,\n  // A quote from `react-hook-form`:\n  // Without `shouldUnregister: true`, an input value would be retained when input is removed.\n  // Setting `shouldUnregister: true` makes the form behave more closer to native.\n  shouldUnregister: PropTypes.bool,\n  control: PropTypes.object.isRequired,\n  rules: PropTypes.object,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func\n};\nexport default ReactHookFormInput;","map":{"version":3,"sources":["../../source/react-hook-form/ReactHookFormInput.js"],"names":["ReactHookFormInput","Component","name","defaultValue","shouldUnregister","control","rules","onChange","onChange_","onBlur","onBlur_","rest","internalRef","useRef","setRef","useCallback","ref","renderInputComponent","restReactHookFormControlledFieldProps","useImperativeHandle","focus","setComponentRef","onChangeCombined","onBlurCombined","onFocus","props","React","PropTypes","func"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback, useImperativeHandle } from 'react'\r\nimport { Controller } from 'react-hook-form'\r\nimport PropTypes from 'prop-types'\r\n\r\nlet ReactHookFormInput = ({\r\n  Component,\r\n  name,\r\n  defaultValue,\r\n  shouldUnregister,\r\n  control,\r\n  rules,\r\n  onChange: onChange_,\r\n  onBlur: onBlur_,\r\n  ...rest\r\n}, ref) => {\r\n  const internalRef = useRef()\r\n\r\n  const setRef = useCallback((instance) => {\r\n    internalRef.current = instance\r\n    if (ref) {\r\n      if (typeof ref === 'function') {\r\n        ref(instance)\r\n      } else {\r\n        ref.current = instance\r\n      }\r\n    }\r\n  }, [ref])\r\n\r\n  // `feact-hook-form` doesn't know how to properly handle `undefined` values.\r\n  // https://github.com/react-hook-form/react-hook-form/issues/2990\r\n  defaultValue = defaultValue === undefined ? null : defaultValue\r\n\r\n  const renderInputComponent = ({\r\n    ref,\r\n    onChange,\r\n    onBlur,\r\n    // `restReactHookFormControlledFieldProps` contain properties like `name` and `value`.\r\n    // https://github.com/react-hook-form/react-hook-form/blob/b0e6c3057ac12a7b12d5616aecf3791acb7d7204/src/types/controller.ts#L21-L30\r\n    ...restReactHookFormControlledFieldProps\r\n  }) => {\r\n    // Setting `ref` passed by `react-hook-form` results in a bug:\r\n    // when an initial value is defined (example: \"+78005553535\")\r\n    // it seems to be set directly on the `ref`d `<input/>`\r\n    // by `react-hook-form` and the result is a non-formatted\r\n    // \"+78005553535\" initial value in the `<input/>`.\r\n    //\r\n    // To work around that bug, a fake `ref` is assigned,\r\n    // so that it could only `.focus()` it and no more.\r\n    //\r\n    // `useImperativeHandle()` hook seems to allow `ref` being `undefined`.\r\n    //\r\n    // if (ref) {\r\n      useImperativeHandle(ref, () => ({\r\n        focus() {\r\n          internalRef.current.focus()\r\n        }\r\n      }))\r\n    // }\r\n\r\n    const setComponentRef = useCallback((instance) => {\r\n      setRef(instance)\r\n      // if (ref) {\r\n      //   if (typeof ref === 'function') {\r\n      //     ref(instance)\r\n      //   } else {\r\n      //     ref.current = instance\r\n      //   }\r\n      // }\r\n    }, [ref, setRef])\r\n\r\n    const onChangeCombined = useCallback((value) => {\r\n      onChange(value)\r\n      if (onChange_) {\r\n        onChange_(value)\r\n      }\r\n    }, [\r\n      onChange,\r\n      onChange_\r\n    ])\r\n\r\n    const onBlurCombined = useCallback((event) => {\r\n      onBlur(event)\r\n      if (onBlur_) {\r\n        onBlur_(event)\r\n      }\r\n    }, [\r\n      onBlur,\r\n      onBlur_\r\n    ])\r\n\r\n    return (\r\n      <Component\r\n        {...rest}\r\n        {...restReactHookFormControlledFieldProps}\r\n        ref={setComponentRef}\r\n        onChange={onChangeCombined}\r\n        onBlur={onBlurCombined}/>\r\n    )\r\n  }\r\n\r\n  // `react-hook-form@7` no longer accepts `onFocus` property.\r\n  // Since this component can be used with both `v6` and `v7`,\r\n  // the `onFocus` property is left here.\r\n  const onFocus = useCallback(() => {\r\n    // internalRef.current.disabled = false\r\n    internalRef.current.focus()\r\n  }, [])\r\n\r\n  return (\r\n    <Controller\r\n      control={control}\r\n      name={name}\r\n      defaultValue={defaultValue}\r\n      shouldUnregister={shouldUnregister}\r\n      rules={rules}\r\n      onFocus={onFocus}\r\n      render={(props) => {\r\n        // Differentiate between `react-hook-form@6` and `react-hook-form@7`.\r\n        // https://react-hook-form.com/migrate-v6-to-v7/\r\n        // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/57\r\n        // `props` (before v7) and `props.fields` (in v7) contain properties like:\r\n        // `ref`, `name`, `value`, `onChange`, `onBlur`.\r\n        // https://github.com/react-hook-form/react-hook-form/blob/b0e6c3057ac12a7b12d5616aecf3791acb7d7204/src/types/controller.ts#L21-L30\r\n        return renderInputComponent(props.field || props)\r\n      }}/>\r\n  )\r\n}\r\n\r\nReactHookFormInput = React.forwardRef(ReactHookFormInput)\r\n\r\nReactHookFormInput.propTypes = {\r\n  Component: PropTypes.elementType.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  defaultValue: PropTypes.string,\r\n  // A quote from `react-hook-form`:\r\n  // Without `shouldUnregister: true`, an input value would be retained when input is removed.\r\n  // Setting `shouldUnregister: true` makes the form behave more closer to native.\r\n  shouldUnregister: PropTypes.bool,\r\n  control: PropTypes.object.isRequired,\r\n  rules: PropTypes.object,\r\n  onChange: PropTypes.func,\r\n  onBlur: PropTypes.func\r\n}\r\n\r\nexport default ReactHookFormInput"]},"metadata":{},"sourceType":"module"}